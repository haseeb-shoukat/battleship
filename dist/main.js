(()=>{"use strict";const e=function(e){return{info:e,coords:e.coords,hit:[],processHit:function(e){this.hit.push(e)},isSunk:function(){return this.hit.length===this.coords.length},contains:function(e,t){return this[t].some((t=>JSON.stringify(t)===JSON.stringify(e)))}}};class t{constructor(t="player"){this.myBoard=function(){let t=[],s=[];for(let e=0;e<10;e++)for(let r=0;r<10;r++)t.push([e,r]),s.push([e,r]);return{ships:[],missed:[],types:[{type:"Carrier",len:5},{type:"Battleship",len:4},{type:"Destroyer",len:3},{type:"Submarine",len:3},{type:"Patrol Boat",len:2}],legalPlacements:s,legalMoves:t,automaticShips:function(){this.types.forEach((t=>{const s=["x","y"][Math.floor(2*Math.random())];let r=[];for(;!this.canPlaceShip(r);){r=[];let[e,i]=this.legalPlacements[Math.floor(Math.random()*this.legalPlacements.length)];if("x"===s)for(let s=i;s<i+t.len;s++)r.push([e,s]);else for(let s=e;s<e+t.len;s++)r.push([s,i])}let i={coords:r,axis:s};this.ships.push(e(i)),this.updateLegalPlacements(i)}))},placeShip:function(t){this.ships.push(e(t)),this.updateLegalPlacements(t)},canPlaceShip:function(e){return!(e.length<2)&&e.every((e=>this.legalPlacements.some((t=>JSON.stringify(e)===JSON.stringify(t)))))},updateLegalPlacements:function(e){let t=JSON.parse(JSON.stringify(e.coords)),[s,r]=e.coords[0],[i,n]=e.coords[e.coords.length-1];"y"===e.axis?(t.push([s-1,r],[i+1,n]),t.forEach((([e,s])=>{t.push([e,s-1],[e,s+1])})),e.coords.forEach((([e,s])=>{t.push([e,s-1],[e,s+1])}))):(t.push([s,r-1],[i,n+1]),t.forEach((([e,s])=>{t.push([e-1,s],[e+1,s])})),e.coords.forEach((([e,s])=>{t.push([e-1,s],[e+1,s])})));let o=this.legalPlacements.filter((e=>t.every((t=>JSON.stringify(e)!==JSON.stringify(t)))));this.legalPlacements=o},receiveAttack:function(e,t){let s=!1;return this.ships.every((r=>!r.contains([e,t],"coords")||(r.processHit([e,t]),s=!0,!1))),!1===s&&this.missed.push([e,t]),this.updateLegal(e,t),s},allSunk:function(){return this.ships.every((e=>e.isSunk()))},updateLegal:function(e,t){let s=this.legalMoves.filter((s=>JSON.stringify(s)!==JSON.stringify([e,t])));this.legalMoves=s},isIllegal:function(e,t){return this.legalMoves.every((s=>JSON.stringify(s)!==JSON.stringify([e,t])))}}}(),this.enemy,this.id=t,this.currentTurn=!1}setEnemy(e){this.enemy=e}setCurrent(e){this.currentTurn=e}attack(e,t){return this.enemy.receive(e,t)}compShips(){"comp"===this.id&&this.myBoard.automaticShips()}compAttack(){if("comp"!==this.id)return;let e=this.enemy.myBoard.legalMoves,[t,s]=e[Math.floor(Math.random()*e.length)];return this.enemy.receive(t,s)}receive(e,t){if(this.myBoard.isIllegal(e,t))return"Illegal Move";!0!==this.myBoard.receiveAttack(e,t)&&(this.currentTurn=!0,this.enemy.setCurrent(!1))}}const s=function(){const e=document.querySelector(".board-one"),t=document.querySelector(".board-two");for(let s=0;s<10;s++)for(let r=0;r<10;r++){const i=document.createElement("div");i.classList.add("board-item"),i.dataset.coord=[s,r].join(""),e.appendChild(i),t.appendChild(i.cloneNode())}const s=function(e){let t;t="player"===e.id?"one":"two",e.myBoard.missed.forEach((e=>{document.querySelector(`.board-${t} > [data-coord="${e.join("")}"]`).classList.add("missed")})),e.myBoard.ships.forEach((e=>{e.hit.forEach((e=>{document.querySelector(`.board-${t} > [data-coord="${e.join("")}"]`).classList.add("hit")}))}))};return{render:function(e,t){s(e),s(t)}}}();(function(){const e=new t,r=new t("comp"),i=function(){s.render(e,r),!0!==e.currentTurn?n():r.myBoard.legalMoves.forEach((e=>{document.querySelector(`.board-two > [data-coord="${e.join("")}"]`).addEventListener("click",n)}))},n=function(t="null"){if(!0===e.currentTurn){let[s,r]=t.target.dataset.coord.split("").map(Number);e.attack(s,r)}else r.compAttack();i()};return{initialize:function(){e.setEnemy(r),r.setEnemy(e),e.setCurrent(!0),r.compShips(),console.log(r.myBoard.ships),i()}}})().initialize()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,