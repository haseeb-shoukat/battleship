(()=>{"use strict";class t{constructor(t="player"){this.myBoard=function(){let t=[];for(let e=0;e<10;e++)for(let r=0;r<10;r++)t.push([e,r]);return{ships:[],missed:[],legalMoves:t,placeShip:function(t){this.ships.push(function(t,e){return{id:t,coords:e,hit:[],processHit:function(t){this.hit.push(t)},isSunk:function(){return this.hit.length===this.coords.length},contains:function(t,e){let r=!1;return this[e].forEach((e=>{e[0]!==t[0]||e[1]!==t[1]||(r=!0)})),r}}}(this.ships.length,t))},receiveAttack:function(t,e){let r=!1;return this.ships.every((n=>!n.contains([t,e],"coords")||(n.processHit([t,e]),r=!0,!1))),!1===r&&this.missed.push([t,e]),this.updateLegal(t,e),r},allSunk:function(){return this.ships.every((t=>!1!==t.isSunk()))},updateLegal:function(t,e){let r=this.legalMoves.filter((r=>JSON.stringify(r)!==JSON.stringify([t,e])));this.legalMoves=r},isIllegal:function(t,e){return this.legalMoves.every((r=>JSON.stringify(r)!==JSON.stringify([t,e])))}}}(),this.enemy,this.id=t,this.currentTurn=!1}setEnemy(t){this.enemy=t}setCurrent(t){this.currentTurn=t}attack(t,e){return this.enemy.receive(t,e)}compAttack(){if("comp"!==this.id)return;let t=this.enemy.myBoard.legalMoves,[e,r]=t[Math.floor(Math.random()*t.length)];return this.enemy.receive(e,r)}receive(t,e){if(this.myBoard.isIllegal(t,e))return"Illegal Move";!0!==this.myBoard.receiveAttack(t,e)&&(this.currentTurn=!0,this.enemy.setCurrent(!1))}}const e=function(){const t=document.querySelector(".board-one"),e=document.querySelector(".board-two");for(let r=0;r<10;r++)for(let n=0;n<10;n++){const i=document.createElement("div");i.classList.add("board-item"),i.dataset.coord=[r,n].join(""),t.appendChild(i),e.appendChild(i.cloneNode())}const r=function(t){let e;e="player"===t.id?"one":"two",t.myBoard.missed.forEach((t=>{document.querySelector(`.board-${e} > [data-coord="${t.join("")}"]`).classList.add("missed")})),t.myBoard.ships.forEach((t=>{t.hit.forEach((t=>{document.querySelector(`.board-${e} > [data-coord="${t.join("")}"]`).classList.add("hit")}))}))};return{render:function(t,e){r(t),r(e)}}}();(function(){const r=new t,n=new t("comp"),i=function(){e.render(r,n),!0!==r.currentTurn?s():n.myBoard.legalMoves.forEach((t=>{document.querySelector(`.board-two > [data-coord="${t.join("")}"]`).addEventListener("click",s)}))},s=function(t="null"){if(!0===r.currentTurn){let[e,n]=t.target.dataset.coord.split("").map(Number);r.attack(e,n)}else n.compAttack();i()};return{initialize:function(){r.setEnemy(n),n.setEnemy(r),r.setCurrent(!0),i()}}})().initialize()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,