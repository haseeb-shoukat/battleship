(()=>{"use strict";const e=function(e){return{info:e,coords:e.coords,hit:[],processHit:function(e){this.hit.push(e)},isSunk:function(){return this.hit.length===this.coords.length},contains:function(e,t){return this[t].some((t=>JSON.stringify(t)===JSON.stringify(e)))}}};class t{constructor(t="player"){this.myBoard=function(){let t=[],o=[];for(let e=0;e<10;e++)for(let r=0;r<10;r++)t.push([e,r]),o.push([e,r]);return{ships:[],missed:[],types:[{type:"Carrier",len:5},{type:"Battleship",len:4},{type:"Destroyer",len:3},{type:"Submarine",len:3},{type:"Patrol Boat",len:2}],legalPlacements:o,legalMoves:t,automaticShips:function(){this.types.forEach((t=>{const o=["x","y"][Math.floor(2*Math.random())];let r=[];for(;!this.canPlaceShip(r);){r=[];let[e,n]=this.legalPlacements[Math.floor(Math.random()*this.legalPlacements.length)];if("x"===o)for(let o=n;o<n+t.len;o++)r.push([e,o]);else for(let o=e;o<e+t.len;o++)r.push([o,n])}let n={coords:r,axis:o};this.ships.push(e(n)),this.updateLegalPlacements(n)}))},placeShip:function(t){this.ships.push(e(t)),this.updateLegalPlacements(t)},canPlaceShip:function(e){return!(e.length<2)&&e.every((e=>this.legalPlacements.some((t=>JSON.stringify(e)===JSON.stringify(t)))))},updateLegalPlacements:function(e){let t=JSON.parse(JSON.stringify(e.coords)),[o,r]=e.coords[0],[n,s]=e.coords[e.coords.length-1];"y"===e.axis?(t.push([o-1,r],[n+1,s]),t.forEach((([e,o])=>{t.push([e,o-1],[e,o+1])})),e.coords.forEach((([e,o])=>{t.push([e,o-1],[e,o+1])}))):(t.push([o,r-1],[n,s+1]),t.forEach((([e,o])=>{t.push([e-1,o],[e+1,o])})),e.coords.forEach((([e,o])=>{t.push([e-1,o],[e+1,o])})));let i=this.legalPlacements.filter((e=>t.every((t=>JSON.stringify(e)!==JSON.stringify(t)))));this.legalPlacements=i},receiveAttack:function(e,t){let o=!1;return this.ships.every((r=>!r.contains([e,t],"coords")||(r.processHit([e,t]),o=!0,!1))),!1===o&&this.missed.push([e,t]),this.updateLegal(e,t),o},allSunk:function(){return this.ships.every((e=>e.isSunk()))},updateLegal:function(e,t){let o=this.legalMoves.filter((o=>JSON.stringify(o)!==JSON.stringify([e,t])));this.legalMoves=o},isIllegal:function(e,t){return this.legalMoves.every((o=>JSON.stringify(o)!==JSON.stringify([e,t])))}}}(),this.enemy,this.id=t,this.currentTurn=!1}setEnemy(e){this.enemy=e}setCurrent(e){this.currentTurn=e}attack(e,t){return this.enemy.receive(e,t)}compShips(){"comp"===this.id&&this.myBoard.automaticShips()}compAttack(){if("comp"!==this.id)return;let e=this.enemy.myBoard.legalMoves,[t,o]=e[Math.floor(Math.random()*e.length)];return this.enemy.receive(t,o)}receive(e,t){if(this.myBoard.isIllegal(e,t))return"Illegal Move";!0!==this.myBoard.receiveAttack(e,t)&&(this.currentTurn=!0,this.enemy.setCurrent(!1))}}const o=function(){const e=document.querySelector(".board-one"),t=document.querySelector(".board-two"),o=document.querySelector(".placing-board"),n=document.querySelector(".rotate-btn");let s=[],i="x";n.addEventListener("click",(e=>{i="y"===i?"x":"y"}));for(let o=0;o<10;o++)for(let r=0;r<10;r++){const n=document.createElement("div");n.classList.add("board-item"),n.dataset.coord=[r,o].join(""),e.appendChild(n),t.appendChild(n.cloneNode())}const a=function(e,t){!function(e){o.innerHTML="";for(let e=0;e<10;e++)for(let t=0;t<10;t++){const r=document.createElement("div");r.classList.add("board-item","invalid-placement"),r.dataset.coord=[t,e].join(""),o.appendChild(r)}e.myBoard.legalPlacements.forEach((([e,t])=>{document.querySelector(`.placing-board > [data-coord="${e}${t}"`).classList.remove("invalid-placement")})),e.myBoard.ships.forEach((e=>{e.coords.forEach((([e,t])=>{const o=document.querySelector(`.placing-board > [data-coord="${e}${t}"`);o.classList.remove("invalid-placement"),o.classList.add("ship")}))}))}(e);const r=document.querySelectorAll(".placing-board > .board-item"),n=document.querySelector(".card-text"),s=e.myBoard.types[t];n.textContent=`Place your ${s.type}`,r.forEach((o=>{o.addEventListener("mouseover",c.bind(null,o,s,e)),o.addEventListener("mouseout",l),o.addEventListener("click",d.bind(null,e,s,t))}))},c=function(e,t,o){const[r,n]=e.dataset.coord.split("").map(Number);let a=[];if("y"===i)for(let e=r;e<r+t.len;e++)a.push([e,n]);else for(let e=n;e<n+t.len;e++)a.push([r,e]);if(o.myBoard.canPlaceShip(a))a.forEach((([e,t])=>{document.querySelector(`.placing-board > [data-coord="${[e,t].join("")}"]`).classList.add("hover")})),s=a;else{let[e,t]=a[0];document.querySelector(`.placing-board > [data-coord="${[e,t].join("")}"]`).classList.add("invalid-hover"),s=[]}},l=function(e){document.querySelectorAll(".hover").forEach((e=>e.classList.remove("hover"))),document.querySelectorAll(".invalid-hover").forEach((e=>e.classList.remove("invalid-hover")))},d=function(e,t,o){e.myBoard.canPlaceShip(s)&&(e.myBoard.placeShip({coords:s,axis:i}),"Patrol Boat"===t.type?(document.querySelector(".overlay").remove(),r.gameLoop()):a(e,o+1))},u=function(e){let t;"player"===e.id?(t="one",e.myBoard.ships.forEach((e=>{e.coords.forEach((e=>{document.querySelector(`.board-${t} > [data-coord="${e.join("")}"]`).classList.add("ship")}))}))):t="two",e.myBoard.missed.forEach((e=>{document.querySelector(`.board-${t} > [data-coord="${e.join("")}"]`).classList.add("missed")})),e.myBoard.ships.forEach((e=>{e.hit.forEach((e=>{document.querySelector(`.board-${t} > [data-coord="${e.join("")}"]`).classList.add("hit")}))}))};return{render:function(e,t){u(e),u(t)},renderPlacingBoard:function(e){a(e,0)}}}(),r=function(){const e=new t,r=new t("comp"),n=function(){o.render(e,r),!0!==e.currentTurn?s():r.myBoard.legalMoves.forEach((e=>{document.querySelector(`.board-two > [data-coord="${e.join("")}"]`).addEventListener("click",s)}))},s=function(t="null"){if(!0===e.currentTurn){let[o,r]=t.target.dataset.coord.split("").map(Number);e.attack(o,r)}else r.compAttack();n()};return{initialize:function(){e.setEnemy(r),r.setEnemy(e),e.setCurrent(!0),r.compShips(),o.renderPlacingBoard(e)},gameLoop:n}}();r.initialize()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,